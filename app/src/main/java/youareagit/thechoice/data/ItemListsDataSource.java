/** The MIT License (MIT)

 Copyright (c) 2015 Martin BÃ¶lter

 Permission is hereby granted, free of charge, to any person obtaining a copy
 of this software and associated documentation files (the "Software"), to deal
 in the Software without restriction, including without limitation the rights
 to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 copies of the Software, and to permit persons to whom the Software is
 furnished to do so, subject to the following conditions:

 The above copyright notice and this permission notice shall be included in all
 copies or substantial portions of the Software.

 THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 SOFTWARE. */

package youareagit.thechoice.data;

import android.content.ContentValues;
import android.content.Context;
import android.database.Cursor;
import android.database.SQLException;
import android.database.sqlite.SQLiteConstraintException;
import android.database.sqlite.SQLiteDatabase;

import java.util.ArrayList;
import java.util.List;

/**
 * The database transformation class for mapping database values and the
 * corresponding <code>ItemList</code> object variables and vice versa.
 *
 * @author M
 *
 */
public class ItemListsDataSource {
    // Database fields
    /** The database to use. */
    private SQLiteDatabase database;
    /** Database helper. */
    private ItemListsSQLiteHelper dbHelper;
    /**
     * Stores all (relevant) columns of the item lists database so they can be
     * queried.
     */
    private String[] allColumns = { ItemListsSQLiteHelper.COLUMN_ID,
            ItemListsSQLiteHelper.COLUMN_LISTNAME };

    /**
     * Constructor.
     *
     * @param context
     *            The <code>Context</code> to use.
     */
    public ItemListsDataSource(Context context) {
        dbHelper = new ItemListsSQLiteHelper(context);
    }

    /**
     * Open a connection to the database.
     *
     * @throws SQLException
     *             If the database cannot be opened.
     */
    public void open() throws SQLException {
        database = dbHelper.getWritableDatabase();
        dbHelper.onCreate(database);
    }

    /**
     * Close the database connection.
     */
    public void close() {
        dbHelper.close();
    }

    /**
     * Creates a new <code>ItemList</code> object with the given values, new
     * id from the database and also inserts the new data into the database
     * under the id if the item list name did not already exist.
     *
     * @param listName
     *            The list name as a <code>String</code>.
     * @return The newly created <code>ItemList</code> object with the given
     *         values and a new id or <code>null</code> if the item list
     *         already existed.
     * @throws SQLiteConstraintException
     *             Is thrown if the item list name already exists.
     */
    public ItemList createItemList(String listName)
            throws SQLiteConstraintException {
        ContentValues values = new ContentValues();
        ItemList newItemList = null;

        // Add the arguments
        values.put(ItemListsSQLiteHelper.COLUMN_LISTNAME, listName);
        // Store the new valid ID value generated by the INSERT statement
        long insertId = database.insert(
                ItemListsSQLiteHelper.TABLE_ITEMLISTS, null, values);
        // Store the cursor belonging to the ID
        Cursor cursor = database.query(
                ItemListsSQLiteHelper.TABLE_ITEMLISTS, allColumns,
                ItemListsSQLiteHelper.COLUMN_ID + " = " + insertId, null,
                null, null, null);
        if (cursor != null) {
            if (cursor.getCount() > 0) {
                cursor.moveToFirst();
                newItemList = cursorToItemList(cursor);
            }
            cursor.close();
        }
        return newItemList;
    }

    /**
     * Return a list of all item lists which are stored in the database.
     *
     * @return A list of all stored item lists in the database.
     */
    public List<ItemList> getAllItemLists() {
        List<ItemList> itemLists = new ArrayList<>();
        // Get all item lists from the database
        Cursor cursor = database.query(
                ItemListsSQLiteHelper.TABLE_ITEMLISTS, allColumns, null,
                null, null, null, null);

        cursor.moveToFirst();
        while (!cursor.isAfterLast()) {
            ItemList itemList = cursorToItemList(cursor);
            itemLists.add(itemList);
            itemList.printData();
            cursor.moveToNext();
        }
        // Make sure to close the cursor
        cursor.close();
        return itemLists;
    }

    /**
     * Delete the given item list from the database.
     *
     * @param itemList
     *            The item list to delete from the database.
     */
    public void deleteItem(ItemList itemList) {
        long id = itemList.getId();
        System.out.println("Comment deleted with id: " + id);
        database.delete(ItemListsSQLiteHelper.TABLE_ITEMLISTS,
                ItemListsSQLiteHelper.COLUMN_ID + " = " + String.valueOf(id),
                null);
    }

    /**
     * Get a item list from the database by its id.
     *
     * @param id
     *            The id of the entry to search.
     * @return Return the found entry with the given id or
     *         <code>null</code>.
     */
    public ItemList getItemList(long id) {
        ItemList itemList = null;
        System.out.println("Comment get ItemList with id: " + id);

        // Search the ID in the database and return the (first) cursor entry
        Cursor cursor = getItemListCursor(id);
        itemList = cursorToItemList(cursor);
        // Make sure to close the cursor
        cursor.close();
        // Return the found entry by its id or null
        return itemList;
    }

    /**
     * Get a cursor for a item list from the database by its id.
     *
     * @param id
     *            The id of the entry to search.
     * @return Return the found cursor for the given item id or
     *         <code>null</code>.
     */
    public Cursor getItemListCursor(long id) {
        System.out.println("Comment get itemListCursor with id: " + id);
        String whereClause = ItemListsSQLiteHelper.COLUMN_ID + " = ?";
        String itemListID = String.valueOf(id);
        String[] whereArgs = new String[] { itemListID };

        // Query the database with the specific id as a search key
        Cursor cursor = database.query(
                ItemListsSQLiteHelper.TABLE_ITEMLISTS, allColumns,
                whereClause, whereArgs, null, null, null);
        // Move the cursor to the first position, just in case there was more
        // than one result
        cursor.moveToFirst();
        System.out.print("Found: ");
        for (int i = 0; i < allColumns.length; i++) {
            String columnName = allColumns[i];
            System.out.println(columnName + cursor.getString(i));
        }
        // Make sure to close the cursor
        // cursor.close();
        // Return the found item by its id or null
        return cursor;
    }

    /**
     * Returns a item list which is stored in the database by item list name if it exists.
     *
     * @param itemListName
     *            The item list name to search.
     *
     * @return The found <code>ItemList</code> object with the specific list name from the database
     *          or <code>null</code> if it did not exist in the database.
     */
    public ItemList getItemList(String itemListName) {
        ItemList itemList = null;
        String whereClause = ItemListsSQLiteHelper.COLUMN_LISTNAME + "='"
                + itemListName + "'";
        // Query the database for the specific item list
        Cursor cursor = database.query(
                ItemListsSQLiteHelper.TABLE_ITEMLISTS, allColumns,
                whereClause, null, null, null, null);

        cursor.moveToFirst();
        while (!cursor.isAfterLast()) {
            itemList = cursorToItemList(cursor);
            cursor.moveToNext();
        }
        // Make sure to close the cursor
        cursor.close();
        return itemList;
    }

    /**
     * Transforms data from a database query to a new <code>ItemList</code>
     * object with the query result values.
     *
     * @param cursor
     *            The database query result.
     * @return A new <code>ItemList</code> object with set values from the
     *         database query result or <code>null</code> if the given cursor
     *         was empty.
     */
    private ItemList cursorToItemList(Cursor cursor) {
        ItemList itemList = null;

        if (cursor != null && cursor.getCount() > 0) {
            itemList = new ItemList();
            itemList.setId(cursor.getLong(0));
            itemList.setListName(cursor.getString(1));
        }
        return itemList;
    }

    /**
     * Update the item list entry in the database via the ID of the given newly
     * manipulated item list.
     *
     * @param itemList
     *            The manipulated <code>ItemList</code> object to update in
     *            the database.
     * @throws SQLiteConstraintException
     *             Is thrown if the item list name does not exist.
     */
    public void updateItem(ItemList itemList) {
        if (itemList != null) {
            System.out.print("Entry to UPDATE: ");
            getItemList(itemList.getId()).printData();
            System.out.print("New entry: ");
            itemList.printData();
            // Set all values
            ContentValues values = itemList.getAllContentValues();

            // Do the database update
            database.update(
                    ItemListsSQLiteHelper.TABLE_ITEMLISTS,
                    values,
                    ItemListsSQLiteHelper.COLUMN_ID + " = "
                            + itemList.getId(), null);
        }
    }

    /**
     * Deletes all item list entries in the database and list.
     */
    public void deleteAllItems() {
        emptyItemListsTable();
    }

    /**
     * Empty the items table so that all entries are deleted.
     */
    public void emptyItemListsTable() {
        // TODO Exchange the code so that a table is just updated and filled
        // with null???
        database.execSQL("DROP TABLE IF EXISTS "
                + ItemListsSQLiteHelper.TABLE_ITEMLISTS);
        dbHelper.onCreate(database);
    }
}
