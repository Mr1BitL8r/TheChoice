/** The MIT License (MIT)

 Copyright (c) 2015 Martin BÃ¶lter

 Permission is hereby granted, free of charge, to any person obtaining a copy
 of this software and associated documentation files (the "Software"), to deal
 in the Software without restriction, including without limitation the rights
 to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 copies of the Software, and to permit persons to whom the Software is
 furnished to do so, subject to the following conditions:

 The above copyright notice and this permission notice shall be included in all
 copies or substantial portions of the Software.

 THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 SOFTWARE. */

package youareagit.thechoice.data;
import java.util.ArrayList;
import java.util.List;

import android.content.ContentValues;
import android.content.Context;
import android.database.Cursor;
import android.database.SQLException;
import android.database.sqlite.SQLiteConstraintException;
import android.database.sqlite.SQLiteDatabase;

/**
 * The database transformation class for mapping database values and the
 * corresponding <code>Item</code> object variables and vice versa.
 *
 * @author M
 *
 */
public class ItemsDataSource {
    // Database fields
    /** The database to use. */
    private SQLiteDatabase database;
    /** Database helper. */
    private ItemsSQLiteHelper dbHelper;
    /**
     * Stores all (relevant) columns of the item database so they can be
     * queried.
     */
    private String[] allColumns = { ItemsSQLiteHelper.COLUMN_ID,
            ItemsSQLiteHelper.COLUMN_NAME};

    /**
     * Constructor.
     *
     * @param context
     *            The <code>Context</code> to use.
     */
    public ItemsDataSource(Context context) {
        dbHelper = new ItemsSQLiteHelper(context);
    }

    /**
     * Open a connection to the database.
     *
     * @throws SQLException
     *             If the database cannot be opened.
     */
    public void open() throws SQLException {
        database = dbHelper.getWritableDatabase();
        dbHelper.onCreate(database);
    }

    /**
     * Close the database connection.
     */
    public void close() {
        dbHelper.close();
    }

    /**
     * Creates a new <code>Item</code> object with the given values, new
     * id from the database and also inserts the new data into the database
     * under the id if the item name did not already exist.
     *
     * @param name
     *            The name of the item.
     * @return The newly created <code>Item</code> object with the given
     *         values and a new id or <code>null</code> if the item
     *         already existed.
     * @throws SQLiteConstraintException
     *             Is thrown if the item name already exists.
     */
    public Item createItem(String name)
            throws SQLiteConstraintException {
        ContentValues values = new ContentValues();
        Item newItem = null;

        // Add the arguments
        values.put(ItemsSQLiteHelper.COLUMN_NAME, name);
        // Store the new valid ID value generated by the INSERT statement
        long insertId = database.insert(
                ItemsSQLiteHelper.TABLE_ITEMS, null, values);
        // Store the cursor belonging to the ID
        Cursor cursor = database.query(
                ItemsSQLiteHelper.TABLE_ITEMS, allColumns,
                ItemsSQLiteHelper.COLUMN_ID + " = " + insertId, null,
                null, null, null);
        if (cursor != null) {
            if (cursor.getCount() > 0) {
                cursor.moveToFirst();
                newItem = cursorToItem(cursor);
            }
            cursor.close();
        }
        return newItem;
    }

    /**
     * Delete the given item from the database.
     *
     * @param item
     *            The item to delete from the database.
     */
    public void deleteItem(Item item) {
        long id = item.getId();
        System.out.println("Comment deleted with id: " + id);
        database.delete(ItemsSQLiteHelper.TABLE_ITEMS,
                ItemsSQLiteHelper.COLUMN_ID + " = " + String.valueOf(id),
                null);
    }

    /**
     * Get a item from the database by its id.
     *
     * @param id
     *            The id of the item to search
     * @return Return the found item with the given id or
     *         <code>null</code>.
     */
    public Item getItem(long id) {
        Item item = null;
        System.out.println("Comment get Item with id: " + id);

        // Search the ID in the database and return the (first) cursor entry
        Cursor cursor = getItemCursor(id);
        item = cursorToItem(cursor);
        // make sure to close the cursor
        cursor.close();
        // Return the found item by its id or null
        return item;
    }

    /**
     * Get a cursor for a item from the database by its id.
     *
     * @param id
     *            The id of the item to search
     * @return Return the found cursor for the given item id or
     *         <code>null</code>.
     */
    public Cursor getItemCursor(long id) {
        System.out.println("Comment get itemCursor with id: " + id);
        String whereClause = ItemsSQLiteHelper.COLUMN_ID + " = ?";
        String itemID = String.valueOf(id);
        String[] whereArgs = new String[] { itemID };

        // Query the database with the specific id as a search key
        Cursor cursor = database.query(
                ItemsSQLiteHelper.TABLE_ITEMS, allColumns,
                whereClause, whereArgs, null, null, null);
        // Move the cursor to the first position, just in case there was more
        // than one result
        cursor.moveToFirst();
        System.out.print("Found: ");
        for (int i = 0; i < allColumns.length; i++) {
            String columnName = allColumns[i];
            System.out.println(columnName + cursor.getString(i));
        }
        // Make sure to close the cursor
        // cursor.close();
        // Return the found item by its id or null
        return cursor;
    }

    /**
     * Return a list of all items which are stored in the database.
     *
     * @return A list of all stored items in the database.
     */
    public List<Item> getAllItems() {
        List<Item> items = new ArrayList<>();
        // Get all items from the database
        Cursor cursor = database.query(
                ItemsSQLiteHelper.TABLE_ITEMS, allColumns, null,
                null, null, null, null);

        cursor.moveToFirst();
        while (!cursor.isAfterLast()) {
            Item item = cursorToItem(cursor);
            items.add(item);
            item.printData();
            cursor.moveToNext();
        }
        // Make sure to close the cursor
        cursor.close();
        return items;
    }

    /**
     * Returns a item which is stored in the database by name if it exists.
     *
     * @param itemName
     *            The item name to search.
     * @return The found <code>Item</code> object with the specific name
     *         from the database or <code>null</code> if it did not exist.
     */
    public Item getItem(String itemName) {
        Item item = null;
        String whereClause = ItemsSQLiteHelper.COLUMN_NAME + "='"
                + itemName + "'";
        // Query the database for the specific item
        Cursor cursor = database.query(
                ItemsSQLiteHelper.TABLE_ITEMS, allColumns,
                whereClause, null, null, null, null);

        cursor.moveToFirst();
        while (!cursor.isAfterLast()) {
            item = cursorToItem(cursor);
            cursor.moveToNext();
        }
        // Make sure to close the cursor
        cursor.close();
        return item;
    }

    /**
     * Transforms data from a database query to a new <code>Item</code>
     * object with the query result values.
     *
     * @param cursor
     *            The database query result.
     * @return A new <code>Item</code> object with set values from the
     *         database query result or <code>null</code> if the given cursor
     *         was empty.
     */
    private Item cursorToItem(Cursor cursor) {
        Item item = null;

        if (cursor != null && cursor.getCount() > 0) {
            item = new Item();
            item.setId(cursor.getLong(0));
            item.setName(cursor.getString(1));
        }
        return item;
    }

    /**
     * Update the item entry in the database via the ID of the given newly
     * manipulated item.
     *
     * @param item
     *            The manipulated <code>Item</code> object to update in
     *            the database.
     * @throws SQLiteConstraintException
     *             Is thrown if the item name already exists.
     */
    public void updateItem(Item item) {
        if (item != null) {
            System.out.print("Entry to UPDATE: ");
            getItem(item.getId()).printData();
            System.out.print("New entry: ");
            item.printData();
            // Set all values
            ContentValues values = item.getAllContentValues();

            // Do the database update
            database.update(
                    ItemsSQLiteHelper.TABLE_ITEMS,
                    values,
                    ItemsSQLiteHelper.COLUMN_ID + " = "
                            + item.getId(), null);
        }
    }

    /**
     * Deletes all item entries in the database and list.
     */
    public void deleteAllItems() {
        emptyItemsTable();
    }

    /**
     * Empty the items table so that all entries are deleted.
     */
    public void emptyItemsTable() {
        // TODO Exchange the code so that a table is just updated and filled
        // with null???
        database.execSQL("DROP TABLE IF EXISTS "
                + ItemsSQLiteHelper.TABLE_ITEMS);
        dbHelper.onCreate(database);
    }
}
